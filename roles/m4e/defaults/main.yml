---
# defaults file for m4e
state: present
deploy_template: deploy.yaml.j2
config_template: config.yaml.j2
pvc_template: pvc.yaml.j2
secret_template: secret.yaml.j2
service_template: service.yaml.j2
route_template: route.yaml.j2
ingress_template: ingress.yaml.j2
database_name: moodle
database_user: user
database_password: secret
# httpd
httpd_size: 1
httpd_image: quay.io/krestomatio/moodle_httpd
httpd_state: "{{ state }}"
httpd_route_annotations: |
  haproxy.router.openshift.io/rate-limit-connections: 'true'
  haproxy.router.openshift.io/rate-limit-connections.concurrent-tcp: '100'
  haproxy.router.openshift.io/rate-limit-connections.rate-http: '100'
  haproxy.router.openshift.io/rate-limit-connections.rate-tcp: '100'
httpd_route_spec: |
  to:
    kind: Service
    name: '{{ meta.name }}-httpd'
    weight: 100
  port:
    targetPort: http
  # tls:
  #   termination: edge
  #   insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None
httpd_service_spec: |
  sessionAffinity: ClientIP
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
    name: http
  selector:
    app: '{{ meta.name }}-httpd'
httpd_deploy_spec: |
  replicas: {{ httpd_size }}
  selector:
    matchLabels:
      app: '{{ meta.name }}-httpd'
  template:
    metadata:
      labels:
        app: '{{ meta.name }}-httpd'
    spec:
      containers:
      - image: '{{ httpd_image }}'
        name: '{{ meta.name }}-httpd'
        env:
          - name: PHP_FPM_host
            value: '{{ meta.name }}-php-fpm'
        ports:
        - containerPort: 8080
        volumeMounts:
        - mountPath: /var/moodledata
          name: moodledata
      volumes:
      - name: moodledata
        persistentVolumeClaim:
          claimName: '{{ meta.name }}-php-fpm'

# php-fpm
php_fpm_size: 1
php_fpm_image: quay.io/krestomatio/moodle_php-fpm
php_fpm_state: "{{ state }}"
php_fpm_service_spec: |
  sessionAffinity: ClientIP
  ports:
  - port: 9000
    protocol: TCP
  selector:
    app: '{{ meta.name }}-php-fpm'
php_fpm_pvc_spec: |
  accessModes:
    - 'ReadWriteOnce'
  resources:
    requests:
      storage: '1Gi'
php_fpm_deploy_spec: |
  replicas: {{ php_fpm_size }}
  selector:
    matchLabels:
      app: '{{ meta.name }}-php-fpm'
  template:
    metadata:
      labels:
        app: '{{ meta.name }}-php-fpm'
    spec:
      containers:
      - image: '{{ php_fpm_image }}'
        name: '{{ meta.name }}-php-fpm'
        env:
          - name: PHP_FPM_listen_allowed_clients
            value: any
        ports:
        - containerPort: 9000
        volumeMounts:
        - mountPath: /var/moodledata
          name: moodledata
      volumes:
      - name: moodledata
        persistentVolumeClaim:
          claimName: '{{ meta.name }}-php-fpm'

# postgres
postgres_size: 1
postgres_requests_cpu: 200m
postgres_requests_memory: 256Mi
postgres_limits_cpu: 1
postgres_limits_memory: 1Gi
postgres_image: quay.io/krestomatio/postgres
postgres_state: "{{ state }}"
postgres_secret_data: |
  database_password: '{{ database_password | b64encode }}'
postgres_service_spec: |
  selector:
    app: '{{ meta.name }}-postgres'
  clusterIP: None
  ports:
    - name: postgresql
      port: 5432
  sessionAffinity: ClientIP
postgres_pvc_spec: |
  accessModes:
    - 'ReadWriteOnce'
  resources:
    requests:
      storage: '1Gi'
postgres_deploy_spec: |
  replicas: {{ postgres_size }}
  selector:
    matchLabels:
      app: '{{ meta.name }}-postgres'
  template:
    metadata:
      labels:
        app: '{{ meta.name }}-postgres'
    spec:
      containers:
      - image: '{{ postgres_image }}'
        name: '{{ meta.name }}-postgres'
        env:
          - name: POSTGRESQL_DATABASE
            value: '{{ database_name }}'
          - name: POSTGRESQL_USER
            value: '{{ database_user }}'
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: '{{ meta.name }}-postgres'
                key: database_password
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgresql
        readinessProbe:
          exec:
            command:
            - /usr/libexec/check-container
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        livenessProbe:
          exec:
            command:
            - /usr/libexec/check-container
            - --live
          failureThreshold: 3
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          requests:
            cpu: '{{ postgres_requests_cpu }}'
            memory: '{{ postgres_requests_memory }}'
          limits:
            cpu: '{{ postgres_limits_cpu }}'
            memory: '{{ postgres_limits_memory }}'
        volumeMounts:
        - mountPath: /var/lib/pgsql/data
          name: postgres-data
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: '{{ meta.name }}-postgres'

# order intended
objects:
  - name: config
    template: "{{ config_template }}"
  - name: secret
    template: "{{ secret_template }}"
  - name: service
    template: "{{ service_template }}"
  - name: pvc
    template: "{{ pvc_template }}"
  - name: deploy
    template: "{{ deploy_template }}"
  - name: route
    template: "{{ route_template }}"
  - name: ingress
    template: "{{ ingress_template }}"

# order intended
components:
  - name: postgres
    state: "{{ postgres_state }}"
    component: database
    objects:
      - pvc
      - secret
      - service
      - deploy
    secret_data: "{{ postgres_secret_data }}"
    deploy_spec: "{{ postgres_deploy_spec }}"
    service_spec: "{{ postgres_service_spec }}"
    pvc_spec: "{{ postgres_pvc_spec }}"
  - name: php-fpm
    state: "{{ php_fpm_state }}"
    component: backend
    objects:
      - pvc
      - service
      - deploy
    deploy_spec: "{{ php_fpm_deploy_spec }}"
    service_spec: "{{ php_fpm_service_spec }}"
    pvc_spec: "{{ php_fpm_pvc_spec }}"
  - name: httpd
    state: "{{ httpd_state }}"
    component: frontend
    route_annotations: "{{ httpd_route_annotations }}"
    objects:
      - service
      - deploy
      - route
    deploy_spec: "{{ httpd_deploy_spec }}"
    service_spec: "{{ httpd_service_spec }}"
    route_name: "{{ meta.name }}"
    route_spec: "{{ httpd_route_spec }}"
