---
# defaults file for m4e
state: present
host: "{{ meta.name }}-osdk-test"
domain: "apps-crc.testing"
deploy_template: deploy.yaml.j2
config_template: config.yaml.j2
pvc_template: pvc.yaml.j2
secret_template: secret.yaml.j2
service_template: service.yaml.j2
route_template: route.yaml.j2
ingress_template: ingress.yaml.j2
database_name: moodle
database_user: user
database_password: secret
# moodle app
app_image: quay.io/krestomatio/moodle_app
app_container: true
# httpd
httpd_size: 1
httpd_image: quay.io/krestomatio/moodle_httpd
httpd_state: "{{ state }}"
httpd_readiness_probe: true
httpd_readiness_command: "['/usr/libexec/check-container', '-r']"
httpd_readiness_initial: 5
httpd_readiness_period: 30
httpd_readiness_timeout: 3
httpd_readiness_success: 1
httpd_readiness_failure: 6
httpd_liveness_probe: true
httpd_liveness_command: "['/usr/libexec/check-container', '-l']"
httpd_liveness_initial: 5
httpd_liveness_period: 10
httpd_liveness_timeout: 3
httpd_liveness_success: 1
httpd_liveness_failure: 3
httpd_route_annotations: |
  haproxy.router.openshift.io/rate-limit-connections: 'true'
  haproxy.router.openshift.io/rate-limit-connections.concurrent-tcp: '100'
  haproxy.router.openshift.io/rate-limit-connections.rate-http: '100'
  haproxy.router.openshift.io/rate-limit-connections.rate-tcp: '100'
httpd_route_spec: |
  to:
    kind: Service
    name: '{{ meta.name }}-httpd'
    weight: 100
  port:
    targetPort: http
  # tls:
  #   termination: edge
  #   insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None
httpd_service_spec: |
  sessionAffinity: ClientIP
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: '{{ meta.name }}-httpd'
httpd_deploy_spec: |
  replicas: {{ httpd_size }}
  selector:
    matchLabels:
      app: '{{ meta.name }}-httpd'
  template:
    metadata:
      labels:
        app: '{{ meta.name }}-httpd'
    spec:
  {% if app_container %}
      initContainers:
        - name: '{{ meta.name }}-moodle-app'
          image: '{{ app_image }}'
          # Shared volume with main container
          volumeMounts:
          - mountPath: /var/www/html
            name: moodle-app
  {% endif %}
      containers:
      - image: '{{ httpd_image }}'
        name: '{{ meta.name }}-httpd'
        env:
          - name: MOODLE_check_host
            value: '{{ host }}.{{ domain }}'
          - name: PHP_FPM_host
            value: '{{ meta.name }}-php-fpm'
        ports:
        - containerPort: 8080
  {% if httpd_readiness_probe %}
        readinessProbe:
          exec:
            command: {{ httpd_readiness_command }}
          initialDelaySeconds: {{ httpd_readiness_initial }}
          periodSeconds: {{ httpd_readiness_period }}
          timeoutSeconds: {{ httpd_readiness_timeout }}
          successThreshold: {{ httpd_readiness_success }}
          failureThreshold: {{ httpd_readiness_failure }}
  {% endif %}
  {% if httpd_liveness_probe %}
        livenessProbe:
          exec:
            command: {{ httpd_liveness_command }}
          initialDelaySeconds: {{ httpd_liveness_initial }}
          periodSeconds: {{ httpd_liveness_period }}
          timeoutSeconds: {{ httpd_liveness_timeout }}
          successThreshold: {{ httpd_liveness_success }}
          failureThreshold: {{ httpd_liveness_failure }}
  {% endif %}
        volumeMounts:
        - mountPath: /var/moodledata
          name: moodledata
        - mountPath: /var/www/html
          name: moodle-app
      volumes:
      - name: moodledata
        persistentVolumeClaim:
          claimName: '{{ meta.name }}-php-fpm'
      - name: moodle-app
        emptyDir: {}

# php-fpm
php_fpm_size: 1
php_fpm_image: quay.io/krestomatio/moodle_php-fpm
php_fpm_state: "{{ state }}"
php_fpm_readiness_probe: true
php_fpm_readiness_command: "['/usr/libexec/check-container', '-t', '-r']"
php_fpm_readiness_initial: 5
php_fpm_readiness_period: 30
php_fpm_readiness_timeout: 3
php_fpm_readiness_success: 1
php_fpm_readiness_failure: 6
php_fpm_liveness_probe: true
php_fpm_liveness_command: "['/usr/libexec/check-container', '-t', '-l']"
php_fpm_liveness_initial: 5
php_fpm_liveness_period: 10
php_fpm_liveness_timeout: 3
php_fpm_liveness_success: 1
php_fpm_liveness_failure: 3
php_fpm_secret_data: |
  config_php: '{{ lookup('template', 'config.php.j2') | b64encode }}'
php_fpm_service_spec: |
  sessionAffinity: ClientIP
  ports:
  - name: php-fpm
    port: 9000
    protocol: TCP
    targetPort: 9000
  selector:
    app: '{{ meta.name }}-php-fpm'
php_fpm_pvc_spec: |
  accessModes:
    - 'ReadWriteOnce'
  resources:
    requests:
      storage: '1Gi'
php_fpm_deploy_spec: |
  replicas: {{ php_fpm_size }}
  selector:
    matchLabels:
      app: '{{ meta.name }}-php-fpm'
  template:
    metadata:
      labels:
        app: '{{ meta.name }}-php-fpm'
    spec:
      initContainers:
  {% if app_container %}
      - name: '{{ meta.name }}-moodle-app'
        image: '{{ app_image }}'
        # Shared volume with main container
        volumeMounts:
        - mountPath: /var/www/html
          name: moodle-app
  {% endif %}
      - name: '{{ meta.name }}-moodle-config'
        image: '{{ php_fpm_image }}'
        command:
          - '/bin/sh'
          - '-c'
          - 'test -f /var/www/html/config.php || cp -pL /config/config.php /var/www/html/config.php'
        volumeMounts:
        - mountPath: /config
          name: config-php
          readOnly: true
  {% if app_container %}
        - mountPath: /var/www/html
          name: moodle-app
  {% endif %}
      containers:
      - image: '{{ php_fpm_image }}'
        name: '{{ meta.name }}-php-fpm'
        env:
          - name: PHP_FPM_listen_allowed_clients
            value: any
        ports:
        - containerPort: 9000
  {% if php_fpm_readiness_probe %}
        readinessProbe:
          exec:
            command: {{ php_fpm_readiness_command }}
          initialDelaySeconds: {{ php_fpm_readiness_initial }}
          periodSeconds: {{ php_fpm_readiness_period }}
          timeoutSeconds: {{ php_fpm_readiness_timeout }}
          successThreshold: {{ php_fpm_readiness_success }}
          failureThreshold: {{ php_fpm_readiness_failure }}
  {% endif %}
  {% if php_fpm_liveness_probe %}
        livenessProbe:
          exec:
            command: {{ php_fpm_liveness_command }}
          initialDelaySeconds: {{ php_fpm_liveness_initial }}
          periodSeconds: {{ php_fpm_liveness_period }}
          timeoutSeconds: {{ php_fpm_liveness_timeout }}
          successThreshold: {{ php_fpm_liveness_success }}
          failureThreshold: {{ php_fpm_liveness_failure }}
  {% endif %}
        volumeMounts:
        - mountPath: /var/moodledata
          name: moodledata
        - mountPath: /var/www/html
          name: moodle-app
        - mountPath: /var/www/html/config.php
          name: config-php
          subPath: config.php
          readOnly: true
        - mountPath: /config
          name: config-php
          readOnly: true
      volumes:
      - name: moodledata
        persistentVolumeClaim:
          claimName: '{{ meta.name }}-php-fpm'
      - name: moodle-app
        emptyDir: {}
      - name: config-php
        secret:
          secretName: '{{ meta.name }}-php-fpm'
          items:
          - key: config_php
            path: config.php
            mode: 0660

# postgres
postgres_size: 1
postgres_requests_cpu: 200m
postgres_requests_memory: 256Mi
postgres_limits_cpu: 1
postgres_limits_memory: 1Gi
postgres_image: quay.io/krestomatio/postgres
postgres_state: "{{ state }}"
postgres_secret_data: |
  database_password: '{{ database_password | b64encode }}'
postgres_service_spec: |
  selector:
    app: '{{ meta.name }}-postgres'
  clusterIP: None
  ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
  sessionAffinity: ClientIP
postgres_pvc_spec: |
  accessModes:
    - 'ReadWriteOnce'
  resources:
    requests:
      storage: '1Gi'
postgres_deploy_spec: |
  replicas: {{ postgres_size }}
  selector:
    matchLabels:
      app: '{{ meta.name }}-postgres'
  template:
    metadata:
      labels:
        app: '{{ meta.name }}-postgres'
    spec:
      containers:
      - image: '{{ postgres_image }}'
        name: '{{ meta.name }}-postgres'
        env:
          - name: POSTGRESQL_DATABASE
            value: '{{ database_name }}'
          - name: POSTGRESQL_USER
            value: '{{ database_user }}'
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: '{{ meta.name }}-postgres'
                key: database_password
        ports:
        - containerPort: 5432
          name: postgresql
        imagePullPolicy: IfNotPresent
        readinessProbe:
          exec:
            command:
            - /usr/libexec/check-container
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        livenessProbe:
          exec:
            command:
            - /usr/libexec/check-container
            - --live
          failureThreshold: 3
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          requests:
            cpu: '{{ postgres_requests_cpu }}'
            memory: '{{ postgres_requests_memory }}'
          limits:
            cpu: '{{ postgres_limits_cpu }}'
            memory: '{{ postgres_limits_memory }}'
        volumeMounts:
        - mountPath: /var/lib/pgsql/data
          name: postgres-data
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: '{{ meta.name }}-postgres'

# order intended
objects:
  - name: config
    template: "{{ config_template }}"
  - name: secret
    template: "{{ secret_template }}"
  - name: service
    template: "{{ service_template }}"
  - name: pvc
    template: "{{ pvc_template }}"
  - name: deploy
    template: "{{ deploy_template }}"
  - name: route
    template: "{{ route_template }}"
  - name: ingress
    template: "{{ ingress_template }}"

# order intended
components:
  - name: postgres
    state: "{{ postgres_state }}"
    component: database
    objects:
      - pvc
      - secret
      - service
      - deploy
    secret_data: "{{ postgres_secret_data }}"
    deploy_spec: "{{ postgres_deploy_spec }}"
    service_spec: "{{ postgres_service_spec }}"
    pvc_spec: "{{ postgres_pvc_spec }}"
  - name: php-fpm
    state: "{{ php_fpm_state }}"
    component: backend
    objects:
      - pvc
      - secret
      - service
      - deploy
    secret_data: "{{ php_fpm_secret_data }}"
    deploy_spec: "{{ php_fpm_deploy_spec }}"
    service_spec: "{{ php_fpm_service_spec }}"
    pvc_spec: "{{ php_fpm_pvc_spec }}"
  - name: httpd
    state: "{{ httpd_state }}"
    component: frontend
    route_annotations: "{{ httpd_route_annotations }}"
    objects:
      - service
      - deploy
      - route
    deploy_spec: "{{ httpd_deploy_spec }}"
    service_spec: "{{ httpd_service_spec }}"
    route_name: "{{ meta.name }}"
    route_spec: "{{ httpd_route_spec }}"

# moodle
moodle_config_dbhost: "{{ meta.name }}-postgres"
moodle_config_dbname: "{{ database_name }}"
moodle_config_dbuser: "{{ database_user }}"
moodle_config_dbpass: "{{ database_password }}"
moodle_config_wwwroot: "http://{{ host }}.{{ domain }}"
moodle_config_dataroot: "/var/moodledata"
# moodle_config_context_cache_max_size: 7500
# moodle_config_dbtype: pgsql
# moodle_config_dblibrary: native
# moodle_config_prefix: "mdl_"
# moodle_config_dbpersist: "false"
# moodle_config_dbsocket: "false"
# moodle_config_dbport: "''"
# moodle_config_dbhandlesoptions: "false"
# moodle_config_dbcollation: "utf8mb4_unicode_ci"
# moodle_config_fetchbuffersize: "100000"
# moodle_config_directorypermissions: "02777"
# moodle_config_admin: "admin"
# moodle_config_defaultblocks_override: "' '"
# moodle_config_xsendfile: "X-Sendfile"
# moodle_config_yuislasharguments: 1
# moodle_config_db_sessions: true
# moodle_config_redis_sessions:
#   session_redis_host: "redis"
#   session_redis_prefix: "m1_"
#   session_redis_auth: "secret"
# moodle_config_sslproxy: true
# moodle_config_profilingenabled:
#   earlyprofilingenabled: 'true'
#   profilingautofrec: '100'
#   profilingincluded: '/*view.php,/*index.php'
#   profilingallowme: 'true'
#   profilingallowall: 'true'
#   profilinglifetime: 1440
#   pathtodot: '/usr/bin/dot'
# moodle_config_localcachedir: /var/moodledata-localcache
# moodle_config_extramemorylimit: 256M
# moodle_config_tool_lockstats: true
# moodle_config_perfdebug: true
# moodle_config_noemailever: true
# moodle_config_forced_plugin_settings:
#   mod_mymod:
#     setting_one: "one"
#     setting_two: 2
# moodle_config_tool_generator_users_password: secret
# moodle_config_additional_cfg:
#    property_name_one: "one"
#    property_name_two: 2
# moodle_config_additional_block: |
#    $CFG->property_name_one = 'value';
#    $CFG->property_name_two = 2;
