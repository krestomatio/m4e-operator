---
- name: nginx resource definitions
  vars:
    name: nginx
    k8s_state: "{{ nginx_state }}"
    component: nginx
    metadata_app: "{{ nginx_appname }}"
  block:
    - name: nginx service resource definition
      vars:
        kind: Service
        k8s_state: "{{ nginx_pvc_state | default(nginx_state) }}"
        template: "{{ service_template }}"
        metadata_name: "{{ nginx_service }}"
        service_spec: "{{ nginx_service_spec }}"
      import_tasks: k8s/object.yml

    - name: set nginx deploy spec
      when: nginx_deploy_spec is not defined
      set_fact:
        nginx_deploy_spec: "{{ lookup('template', nginx_deploy_spec_template) }}"

    - name: nginx deploy resource definition
      vars:
        kind: Deployment
        k8s_state: "{{ nginx_deploy_state | default(nginx_state) }}"
        k8s_wait: "{{ nginx_deploy_wait | default(true) }}"
        k8s_wait_timeout: "{{ nginx_deploy_wait_timeout | default(120) }}"
        template: "{{ deploy_template }}"
        metadata_name: "{{ nginx_deploy }}"
        annotations: "{{ nginx_deploy_annotations | default(false) }}"
        connects_to: "{{ php_fpm_appname }}"
        runtime: nginx
        deploy_spec: "{{ nginx_deploy_spec }}"
      import_tasks: k8s/object.yml

    - name: nginx route resource definition
      when:
        - expose_type is defined and expose_type
        - "(expose_type | lower) == 'route'"
      vars:
        kind: Route
        k8s_state: "{{ nginx_route_state | default(nginx_state) }}"
        template: "{{ route_template }}"
        metadata_name: "{{ nginx_route }}"
        annotations: "{{ nginx_route_annotations | default(false) }}"
        route_spec: "{{ nginx_route_spec }}"
      import_tasks: k8s/object.yml

    - name: nginx ingress
      when:
        - expose_type is defined and expose_type
        - "(expose_type | lower) == 'ingress'"
      block:
        - name: nginx ingress resource definition
          vars:
            kind: Ingress
            k8s_state: "{{ nginx_ingress_state | default(nginx_state) }}"
            template: "{{ ingress_template }}"
            metadata_name: "{{ nginx_ingress }}"
            annotations: "{{ nginx_ingress_annotations | default(false) }}"
            ingress_spec: "{{ nginx_ingress_spec }}"
          import_tasks: k8s/object.yml

        - name: wait for nginx ingress
          when: _nginx_ingress_wait_for_ip | default(nginx_ingress_wait_for_ip) | default(false)
          block:
            - name: wait for nginx ingress ip
              register: nginx_ingress_ip_task
              until: (nginx_ingress_ip_task.resources | first).status.loadBalancer.ingress is defined
              retries: 6
              delay: 30
              k8s_info:
                api_version: networking.k8s.io/v1beta1
                kind: Ingress
                namespace: "{{ meta_namespace }}"
                name: "{{ nginx_ingress }}"

            - name: wait for nginx ingress uri to be accesible
              vars:
                _moodle_host_ip: "{{ (nginx_ingress_ip_task.resources |
                  first).status.loadBalancer.ingress | map(attribute='ip') | first }}"
              register: nginx_ingress_uri_task
              check_mode: false
              until: nginx_ingress_uri_task.status == 200
              retries: 6
              delay: 30
              uri:
                url: "{{ moodle_protocol }}://{{ _moodle_host_ip }}"
                status_code: 200
                headers:
                  host: "{{ moodle_host }}"

            - name: set nginx ingress ip status
              import_tasks: k8s/status.yml
              vars:
                k8s_status_status:
                  ip: "{{ (nginx_ingress_ip_task.resources | first).status.loadBalancer.ingress |
                    map(attribute='ip') | first }}"
